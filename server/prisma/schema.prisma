generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model buffet_employees {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  buffet_id      BigInt    @db.UnsignedBigInt
  user_id        BigInt    @db.UnsignedBigInt
  created_at     DateTime  @default(now()) @db.Timestamp(0)
  deactivated_at DateTime? @db.Timestamp(0)
  buffets        buffets   @relation(fields: [buffet_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "buffet_employees_buffet_id_foreign")
  users          users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "buffet_employees_user_id_foreign")

  @@index([buffet_id], map: "buffet_employees_buffet_id_foreign")
  @@index([user_id], map: "buffet_employees_user_id_foreign")
}

model buffets {
  id               BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  colleg_id        BigInt             @db.UnsignedBigInt
  owner_user_id    BigInt             @db.UnsignedBigInt
  name             String             @db.VarChar(255)
  address          String             @db.VarChar(255)
  created_at       DateTime           @default(now()) @db.Timestamp(0)
  deactivated_at   DateTime?          @db.Timestamp(0)
  updated_at       DateTime           @updatedAt @db.Timestamp(0)
  buffet_employees buffet_employees[]
  colleges         colleges           @relation(fields: [colleg_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "buffets_colleg_id_foreign")
  users            users              @relation(fields: [owner_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "buffets_owner_user_id_foreign")
  products         products[]

  @@index([colleg_id], map: "buffets_colleg_id_foreign")
  @@index([owner_user_id], map: "buffets_owner_user_id_foreign")
}

model colleges {
  id            BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  university_id BigInt       @db.UnsignedBigInt
  name          String       @db.VarChar(255)
  address       String       @db.VarChar(255)
  created_at    DateTime     @default(now()) @db.Timestamp(0)
  updated_at    DateTime     @updatedAt @db.Timestamp(0)
  buffets       buffets[]
  universities  universities @relation(fields: [university_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "colleges_university_id_foreign")

  @@index([university_id], map: "colleges_university_id_foreign")
}

model gift_products {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  gift_id    BigInt   @db.UnsignedBigInt
  product_id BigInt   @db.UnsignedBigInt
  gifts      gifts    @relation(fields: [gift_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "gift_products_gift_id_foreign")
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "gift_products_product_id_foreign")

  @@index([gift_id], map: "gift_products_gift_id_foreign")
  @@index([product_id], map: "gift_products_product_id_foreign")
}

model gifts {
  id                                  BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  type                                gifts_type      @default(donate)
  receiver_user_id                    BigInt          @db.UnsignedBigInt
  sender_user_id                      BigInt?          @db.UnsignedBigInt
  title                               String?         @db.VarChar(255)
  nickname                            String?         @db.VarChar(40)
  message                             String?         @db.Text
  total_price                         BigInt
  status                              gifts_status    @default(pending)
  received_at                         DateTime?       @db.Timestamp(0)
  scheduled_start_at                  DateTime?       @db.Timestamp(0)
  scheduled_end_at                    DateTime?       @db.Timestamp(0)
  created_at                          DateTime        @default(now()) @db.Timestamp(0)
  updated_at                          DateTime        @updatedAt @db.Timestamp(0)
  gift_products                       gift_products[]
  users_gifts_receiver_user_idTousers users           @relation("gifts_receiver_user_idTousers", fields: [receiver_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "gifts_receiver_user_id_foreign")
  users_gifts_sender_user_idTousers   users?           @relation("gifts_sender_user_idTousers", fields: [sender_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "gifts_sender_user_id_foreign")
  payments                            payments[]

  @@index([receiver_user_id], map: "gifts_receiver_user_id_foreign")
  @@index([sender_user_id], map: "gifts_sender_user_id_foreign")
}

model payments {
  id               BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  paymentable_id   BigInt          @db.UnsignedBigInt
  paymentable_type String          @db.VarChar(50)
  transaction_id   String          @db.VarChar(255)
  status           payments_status @default(pending)
  created_at       DateTime        @default(now()) @db.Timestamp(0)
  updated_at       DateTime        @updatedAt @db.Timestamp(0)
  gifts            gifts           @relation(fields: [paymentable_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "payments_paymentable_foreign")

  @@index([paymentable_id], map: "payments_paymentable_foreign")
}

model products {
  id             BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  buffet_id      BigInt          @db.UnsignedBigInt
  name           String          @db.VarChar(40)
  size           products_size
  price          BigInt
  created_at     DateTime        @default(now()) @db.Timestamp(0)
  deactivated_at DateTime?       @db.Timestamp(0)
  updated_at     DateTime        @updatedAt @db.Timestamp(0)
  gift_products  gift_products[]
  buffets        buffets         @relation(fields: [buffet_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "products_buffet_id_foreign")

  @@index([buffet_id], map: "products_buffet_id_foreign")
}

model roles {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  name       String   @db.VarChar(40)
  created_at DateTime @default(now()) @db.Timestamp(0)
  users      users[]
}

model universities {
  id         BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  name       String     @db.VarChar(40)
  site       String     @db.VarChar(255)
  created_at DateTime   @default(now()) @db.Timestamp(0)
  updated_at DateTime   @updatedAt @db.Timestamp(0)
  colleges   colleges[]
  users      users[]
}

model users {
  id                                  BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  role_id                             BigInt             @db.UnsignedBigInt
  university_id                       BigInt             @db.UnsignedBigInt
  first_name                          String             @db.VarChar(30)
  last_name                           String?            @db.VarChar(30)
  gender                              Gender?
  phone_number                        String             @unique(map: "users_phone_number_unique") @db.VarChar(11)
  username                            String             @unique @db.VarChar(40)
  telegram_chat_id                    BigInt?
  password                            String?            @db.VarChar(255)
  profile_picture                     String?            @db.VarChar(255)
  created_at                          DateTime           @default(now()) @db.Timestamp(0)
  deactivated_at                      DateTime?          @db.Timestamp(0)
  updated_at                          DateTime           @updatedAt @db.Timestamp(0)
  buffet_employees                    buffet_employees[]
  buffets                             buffets[]
  gifts_gifts_receiver_user_idTousers gifts[]            @relation("gifts_receiver_user_idTousers")
  gifts_gifts_sender_user_idTousers   gifts[]            @relation("gifts_sender_user_idTousers")
  roles                               roles              @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_role_id_foreign")
  universities                        universities       @relation(fields: [university_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_university_id_foreign")
  wallets                             wallets[]

  @@index([role_id], map: "users_role_id_foreign")
  @@index([university_id], map: "users_university_id_foreign")
}

model wallet_transactions {
  id         BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  wallet_id  BigInt                   @db.UnsignedBigInt
  amount     BigInt
  type       wallet_transactions_type @default(deposit)
  created_at DateTime                 @default(now()) @db.Timestamp(0)
  wallets    wallets                  @relation(fields: [wallet_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "wallet_transactions_wallet_id_foreign")

  @@index([wallet_id], map: "wallet_transactions_wallet_id_foreign")
}

model wallets {
  id                  BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  user_id             BigInt                @unique @db.UnsignedBigInt
  balance             BigInt                @default(10)
  created_at          DateTime              @default(now()) @db.Timestamp(0)
  deactivated_at      DateTime?             @db.Timestamp(0)
  updated_at          DateTime?              @updatedAt @db.Timestamp(0)
  wallet_transactions wallet_transactions[]
  users               users                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "wallets_user_id_foreign")

  @@index([user_id], map: "wallets_user_id_foreign")
}

enum gifts_type {
  donate
  gift
}

enum products_size {
  small
  medium
  large
}

enum wallet_transactions_type {
  deposit
  withdraw
}

enum payments_status {
  pending
  successful
  failed
  cancelled
}

enum gifts_status {
  pending
  cancelled
  active
  received
}

enum Gender {
  Male
  Female
  NonBinary
  Other
}
